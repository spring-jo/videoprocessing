// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/compiler/mlir/quantization/stablehlo/quantization_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto;
namespace stablehlo {
namespace quantization {
class QuantizationConfig;
struct QuantizationConfigDefaultTypeInternal;
extern QuantizationConfigDefaultTypeInternal _QuantizationConfig_default_instance_;
class RepresentativeDatasetConfig;
struct RepresentativeDatasetConfigDefaultTypeInternal;
extern RepresentativeDatasetConfigDefaultTypeInternal _RepresentativeDatasetConfig_default_instance_;
class StaticRangePtqPreset;
struct StaticRangePtqPresetDefaultTypeInternal;
extern StaticRangePtqPresetDefaultTypeInternal _StaticRangePtqPreset_default_instance_;
class TfRecordFile;
struct TfRecordFileDefaultTypeInternal;
extern TfRecordFileDefaultTypeInternal _TfRecordFile_default_instance_;
}  // namespace quantization
}  // namespace stablehlo
PROTOBUF_NAMESPACE_OPEN
template<> ::stablehlo::quantization::QuantizationConfig* Arena::CreateMaybeMessage<::stablehlo::quantization::QuantizationConfig>(Arena*);
template<> ::stablehlo::quantization::RepresentativeDatasetConfig* Arena::CreateMaybeMessage<::stablehlo::quantization::RepresentativeDatasetConfig>(Arena*);
template<> ::stablehlo::quantization::StaticRangePtqPreset* Arena::CreateMaybeMessage<::stablehlo::quantization::StaticRangePtqPreset>(Arena*);
template<> ::stablehlo::quantization::TfRecordFile* Arena::CreateMaybeMessage<::stablehlo::quantization::TfRecordFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stablehlo {
namespace quantization {

// ===================================================================

class TfRecordFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stablehlo.quantization.TfRecordFile) */ {
 public:
  inline TfRecordFile() : TfRecordFile(nullptr) {}
  ~TfRecordFile() override;
  explicit PROTOBUF_CONSTEXPR TfRecordFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TfRecordFile(const TfRecordFile& from);
  TfRecordFile(TfRecordFile&& from) noexcept
    : TfRecordFile() {
    *this = ::std::move(from);
  }

  inline TfRecordFile& operator=(const TfRecordFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline TfRecordFile& operator=(TfRecordFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TfRecordFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const TfRecordFile* internal_default_instance() {
    return reinterpret_cast<const TfRecordFile*>(
               &_TfRecordFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TfRecordFile& a, TfRecordFile& b) {
    a.Swap(&b);
  }
  inline void Swap(TfRecordFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TfRecordFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TfRecordFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TfRecordFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TfRecordFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TfRecordFile& from) {
    TfRecordFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TfRecordFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stablehlo.quantization.TfRecordFile";
  }
  protected:
  explicit TfRecordFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:stablehlo.quantization.TfRecordFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RepresentativeDatasetConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stablehlo.quantization.RepresentativeDatasetConfig) */ {
 public:
  inline RepresentativeDatasetConfig() : RepresentativeDatasetConfig(nullptr) {}
  ~RepresentativeDatasetConfig() override;
  explicit PROTOBUF_CONSTEXPR RepresentativeDatasetConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepresentativeDatasetConfig(const RepresentativeDatasetConfig& from);
  RepresentativeDatasetConfig(RepresentativeDatasetConfig&& from) noexcept
    : RepresentativeDatasetConfig() {
    *this = ::std::move(from);
  }

  inline RepresentativeDatasetConfig& operator=(const RepresentativeDatasetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepresentativeDatasetConfig& operator=(RepresentativeDatasetConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepresentativeDatasetConfig& default_instance() {
    return *internal_default_instance();
  }
  enum FileCase {
    kTfRecord = 1,
    FILE_NOT_SET = 0,
  };

  static inline const RepresentativeDatasetConfig* internal_default_instance() {
    return reinterpret_cast<const RepresentativeDatasetConfig*>(
               &_RepresentativeDatasetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RepresentativeDatasetConfig& a, RepresentativeDatasetConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RepresentativeDatasetConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepresentativeDatasetConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepresentativeDatasetConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepresentativeDatasetConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepresentativeDatasetConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepresentativeDatasetConfig& from) {
    RepresentativeDatasetConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepresentativeDatasetConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stablehlo.quantization.RepresentativeDatasetConfig";
  }
  protected:
  explicit RepresentativeDatasetConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureKeyFieldNumber = 2,
    kTfRecordFieldNumber = 1,
  };
  // optional string signature_key = 2;
  bool has_signature_key() const;
  private:
  bool _internal_has_signature_key() const;
  public:
  void clear_signature_key();
  const std::string& signature_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature_key();
  PROTOBUF_NODISCARD std::string* release_signature_key();
  void set_allocated_signature_key(std::string* signature_key);
  private:
  const std::string& _internal_signature_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_key(const std::string& value);
  std::string* _internal_mutable_signature_key();
  public:

  // .stablehlo.quantization.TfRecordFile tf_record = 1;
  bool has_tf_record() const;
  private:
  bool _internal_has_tf_record() const;
  public:
  void clear_tf_record();
  const ::stablehlo::quantization::TfRecordFile& tf_record() const;
  PROTOBUF_NODISCARD ::stablehlo::quantization::TfRecordFile* release_tf_record();
  ::stablehlo::quantization::TfRecordFile* mutable_tf_record();
  void set_allocated_tf_record(::stablehlo::quantization::TfRecordFile* tf_record);
  private:
  const ::stablehlo::quantization::TfRecordFile& _internal_tf_record() const;
  ::stablehlo::quantization::TfRecordFile* _internal_mutable_tf_record();
  public:
  void unsafe_arena_set_allocated_tf_record(
      ::stablehlo::quantization::TfRecordFile* tf_record);
  ::stablehlo::quantization::TfRecordFile* unsafe_arena_release_tf_record();

  void clear_file();
  FileCase file_case() const;
  // @@protoc_insertion_point(class_scope:stablehlo.quantization.RepresentativeDatasetConfig)
 private:
  class _Internal;
  void set_has_tf_record();

  inline bool has_file() const;
  inline void clear_has_file();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_key_;
    union FileUnion {
      constexpr FileUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::stablehlo::quantization::TfRecordFile* tf_record_;
    } file_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StaticRangePtqPreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stablehlo.quantization.StaticRangePtqPreset) */ {
 public:
  inline StaticRangePtqPreset() : StaticRangePtqPreset(nullptr) {}
  ~StaticRangePtqPreset() override;
  explicit PROTOBUF_CONSTEXPR StaticRangePtqPreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaticRangePtqPreset(const StaticRangePtqPreset& from);
  StaticRangePtqPreset(StaticRangePtqPreset&& from) noexcept
    : StaticRangePtqPreset() {
    *this = ::std::move(from);
  }

  inline StaticRangePtqPreset& operator=(const StaticRangePtqPreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticRangePtqPreset& operator=(StaticRangePtqPreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticRangePtqPreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticRangePtqPreset* internal_default_instance() {
    return reinterpret_cast<const StaticRangePtqPreset*>(
               &_StaticRangePtqPreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StaticRangePtqPreset& a, StaticRangePtqPreset& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticRangePtqPreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticRangePtqPreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StaticRangePtqPreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StaticRangePtqPreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaticRangePtqPreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StaticRangePtqPreset& from) {
    StaticRangePtqPreset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticRangePtqPreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stablehlo.quantization.StaticRangePtqPreset";
  }
  protected:
  explicit StaticRangePtqPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepresentativeDatasetsFieldNumber = 1,
  };
  // repeated .stablehlo.quantization.RepresentativeDatasetConfig representative_datasets = 1;
  int representative_datasets_size() const;
  private:
  int _internal_representative_datasets_size() const;
  public:
  void clear_representative_datasets();
  ::stablehlo::quantization::RepresentativeDatasetConfig* mutable_representative_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stablehlo::quantization::RepresentativeDatasetConfig >*
      mutable_representative_datasets();
  private:
  const ::stablehlo::quantization::RepresentativeDatasetConfig& _internal_representative_datasets(int index) const;
  ::stablehlo::quantization::RepresentativeDatasetConfig* _internal_add_representative_datasets();
  public:
  const ::stablehlo::quantization::RepresentativeDatasetConfig& representative_datasets(int index) const;
  ::stablehlo::quantization::RepresentativeDatasetConfig* add_representative_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stablehlo::quantization::RepresentativeDatasetConfig >&
      representative_datasets() const;

  // @@protoc_insertion_point(class_scope:stablehlo.quantization.StaticRangePtqPreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stablehlo::quantization::RepresentativeDatasetConfig > representative_datasets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class QuantizationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stablehlo.quantization.QuantizationConfig) */ {
 public:
  inline QuantizationConfig() : QuantizationConfig(nullptr) {}
  ~QuantizationConfig() override;
  explicit PROTOBUF_CONSTEXPR QuantizationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuantizationConfig(const QuantizationConfig& from);
  QuantizationConfig(QuantizationConfig&& from) noexcept
    : QuantizationConfig() {
    *this = ::std::move(from);
  }

  inline QuantizationConfig& operator=(const QuantizationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizationConfig& operator=(QuantizationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuantizationConfig& default_instance() {
    return *internal_default_instance();
  }
  enum PresetCase {
    kStaticRangePtqPreset = 1,
    PRESET_NOT_SET = 0,
  };

  static inline const QuantizationConfig* internal_default_instance() {
    return reinterpret_cast<const QuantizationConfig*>(
               &_QuantizationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuantizationConfig& a, QuantizationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuantizationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuantizationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuantizationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuantizationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuantizationConfig& from) {
    QuantizationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantizationConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stablehlo.quantization.QuantizationConfig";
  }
  protected:
  explicit QuantizationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticRangePtqPresetFieldNumber = 1,
  };
  // .stablehlo.quantization.StaticRangePtqPreset static_range_ptq_preset = 1;
  bool has_static_range_ptq_preset() const;
  private:
  bool _internal_has_static_range_ptq_preset() const;
  public:
  void clear_static_range_ptq_preset();
  const ::stablehlo::quantization::StaticRangePtqPreset& static_range_ptq_preset() const;
  PROTOBUF_NODISCARD ::stablehlo::quantization::StaticRangePtqPreset* release_static_range_ptq_preset();
  ::stablehlo::quantization::StaticRangePtqPreset* mutable_static_range_ptq_preset();
  void set_allocated_static_range_ptq_preset(::stablehlo::quantization::StaticRangePtqPreset* static_range_ptq_preset);
  private:
  const ::stablehlo::quantization::StaticRangePtqPreset& _internal_static_range_ptq_preset() const;
  ::stablehlo::quantization::StaticRangePtqPreset* _internal_mutable_static_range_ptq_preset();
  public:
  void unsafe_arena_set_allocated_static_range_ptq_preset(
      ::stablehlo::quantization::StaticRangePtqPreset* static_range_ptq_preset);
  ::stablehlo::quantization::StaticRangePtqPreset* unsafe_arena_release_static_range_ptq_preset();

  void clear_preset();
  PresetCase preset_case() const;
  // @@protoc_insertion_point(class_scope:stablehlo.quantization.QuantizationConfig)
 private:
  class _Internal;
  void set_has_static_range_ptq_preset();

  inline bool has_preset() const;
  inline void clear_has_preset();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PresetUnion {
      constexpr PresetUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::stablehlo::quantization::StaticRangePtqPreset* static_range_ptq_preset_;
    } preset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TfRecordFile

// string path = 1;
inline void TfRecordFile::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& TfRecordFile::path() const {
  // @@protoc_insertion_point(field_get:stablehlo.quantization.TfRecordFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TfRecordFile::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stablehlo.quantization.TfRecordFile.path)
}
inline std::string* TfRecordFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:stablehlo.quantization.TfRecordFile.path)
  return _s;
}
inline const std::string& TfRecordFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void TfRecordFile::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* TfRecordFile::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* TfRecordFile::release_path() {
  // @@protoc_insertion_point(field_release:stablehlo.quantization.TfRecordFile.path)
  return _impl_.path_.Release();
}
inline void TfRecordFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stablehlo.quantization.TfRecordFile.path)
}

// -------------------------------------------------------------------

// RepresentativeDatasetConfig

// .stablehlo.quantization.TfRecordFile tf_record = 1;
inline bool RepresentativeDatasetConfig::_internal_has_tf_record() const {
  return file_case() == kTfRecord;
}
inline bool RepresentativeDatasetConfig::has_tf_record() const {
  return _internal_has_tf_record();
}
inline void RepresentativeDatasetConfig::set_has_tf_record() {
  _impl_._oneof_case_[0] = kTfRecord;
}
inline void RepresentativeDatasetConfig::clear_tf_record() {
  if (_internal_has_tf_record()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_.tf_record_;
    }
    clear_has_file();
  }
}
inline ::stablehlo::quantization::TfRecordFile* RepresentativeDatasetConfig::release_tf_record() {
  // @@protoc_insertion_point(field_release:stablehlo.quantization.RepresentativeDatasetConfig.tf_record)
  if (_internal_has_tf_record()) {
    clear_has_file();
    ::stablehlo::quantization::TfRecordFile* temp = _impl_.file_.tf_record_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_.tf_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stablehlo::quantization::TfRecordFile& RepresentativeDatasetConfig::_internal_tf_record() const {
  return _internal_has_tf_record()
      ? *_impl_.file_.tf_record_
      : reinterpret_cast< ::stablehlo::quantization::TfRecordFile&>(::stablehlo::quantization::_TfRecordFile_default_instance_);
}
inline const ::stablehlo::quantization::TfRecordFile& RepresentativeDatasetConfig::tf_record() const {
  // @@protoc_insertion_point(field_get:stablehlo.quantization.RepresentativeDatasetConfig.tf_record)
  return _internal_tf_record();
}
inline ::stablehlo::quantization::TfRecordFile* RepresentativeDatasetConfig::unsafe_arena_release_tf_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stablehlo.quantization.RepresentativeDatasetConfig.tf_record)
  if (_internal_has_tf_record()) {
    clear_has_file();
    ::stablehlo::quantization::TfRecordFile* temp = _impl_.file_.tf_record_;
    _impl_.file_.tf_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RepresentativeDatasetConfig::unsafe_arena_set_allocated_tf_record(::stablehlo::quantization::TfRecordFile* tf_record) {
  clear_file();
  if (tf_record) {
    set_has_tf_record();
    _impl_.file_.tf_record_ = tf_record;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stablehlo.quantization.RepresentativeDatasetConfig.tf_record)
}
inline ::stablehlo::quantization::TfRecordFile* RepresentativeDatasetConfig::_internal_mutable_tf_record() {
  if (!_internal_has_tf_record()) {
    clear_file();
    set_has_tf_record();
    _impl_.file_.tf_record_ = CreateMaybeMessage< ::stablehlo::quantization::TfRecordFile >(GetArenaForAllocation());
  }
  return _impl_.file_.tf_record_;
}
inline ::stablehlo::quantization::TfRecordFile* RepresentativeDatasetConfig::mutable_tf_record() {
  ::stablehlo::quantization::TfRecordFile* _msg = _internal_mutable_tf_record();
  // @@protoc_insertion_point(field_mutable:stablehlo.quantization.RepresentativeDatasetConfig.tf_record)
  return _msg;
}

// optional string signature_key = 2;
inline bool RepresentativeDatasetConfig::_internal_has_signature_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RepresentativeDatasetConfig::has_signature_key() const {
  return _internal_has_signature_key();
}
inline void RepresentativeDatasetConfig::clear_signature_key() {
  _impl_.signature_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RepresentativeDatasetConfig::signature_key() const {
  // @@protoc_insertion_point(field_get:stablehlo.quantization.RepresentativeDatasetConfig.signature_key)
  return _internal_signature_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RepresentativeDatasetConfig::set_signature_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.signature_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:stablehlo.quantization.RepresentativeDatasetConfig.signature_key)
}
inline std::string* RepresentativeDatasetConfig::mutable_signature_key() {
  std::string* _s = _internal_mutable_signature_key();
  // @@protoc_insertion_point(field_mutable:stablehlo.quantization.RepresentativeDatasetConfig.signature_key)
  return _s;
}
inline const std::string& RepresentativeDatasetConfig::_internal_signature_key() const {
  return _impl_.signature_key_.Get();
}
inline void RepresentativeDatasetConfig::_internal_set_signature_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.signature_key_.Set(value, GetArenaForAllocation());
}
inline std::string* RepresentativeDatasetConfig::_internal_mutable_signature_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.signature_key_.Mutable(GetArenaForAllocation());
}
inline std::string* RepresentativeDatasetConfig::release_signature_key() {
  // @@protoc_insertion_point(field_release:stablehlo.quantization.RepresentativeDatasetConfig.signature_key)
  if (!_internal_has_signature_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.signature_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_key_.IsDefault()) {
    _impl_.signature_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RepresentativeDatasetConfig::set_allocated_signature_key(std::string* signature_key) {
  if (signature_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_key_.SetAllocated(signature_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_key_.IsDefault()) {
    _impl_.signature_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:stablehlo.quantization.RepresentativeDatasetConfig.signature_key)
}

inline bool RepresentativeDatasetConfig::has_file() const {
  return file_case() != FILE_NOT_SET;
}
inline void RepresentativeDatasetConfig::clear_has_file() {
  _impl_._oneof_case_[0] = FILE_NOT_SET;
}
inline RepresentativeDatasetConfig::FileCase RepresentativeDatasetConfig::file_case() const {
  return RepresentativeDatasetConfig::FileCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StaticRangePtqPreset

// repeated .stablehlo.quantization.RepresentativeDatasetConfig representative_datasets = 1;
inline int StaticRangePtqPreset::_internal_representative_datasets_size() const {
  return _impl_.representative_datasets_.size();
}
inline int StaticRangePtqPreset::representative_datasets_size() const {
  return _internal_representative_datasets_size();
}
inline void StaticRangePtqPreset::clear_representative_datasets() {
  _impl_.representative_datasets_.Clear();
}
inline ::stablehlo::quantization::RepresentativeDatasetConfig* StaticRangePtqPreset::mutable_representative_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:stablehlo.quantization.StaticRangePtqPreset.representative_datasets)
  return _impl_.representative_datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stablehlo::quantization::RepresentativeDatasetConfig >*
StaticRangePtqPreset::mutable_representative_datasets() {
  // @@protoc_insertion_point(field_mutable_list:stablehlo.quantization.StaticRangePtqPreset.representative_datasets)
  return &_impl_.representative_datasets_;
}
inline const ::stablehlo::quantization::RepresentativeDatasetConfig& StaticRangePtqPreset::_internal_representative_datasets(int index) const {
  return _impl_.representative_datasets_.Get(index);
}
inline const ::stablehlo::quantization::RepresentativeDatasetConfig& StaticRangePtqPreset::representative_datasets(int index) const {
  // @@protoc_insertion_point(field_get:stablehlo.quantization.StaticRangePtqPreset.representative_datasets)
  return _internal_representative_datasets(index);
}
inline ::stablehlo::quantization::RepresentativeDatasetConfig* StaticRangePtqPreset::_internal_add_representative_datasets() {
  return _impl_.representative_datasets_.Add();
}
inline ::stablehlo::quantization::RepresentativeDatasetConfig* StaticRangePtqPreset::add_representative_datasets() {
  ::stablehlo::quantization::RepresentativeDatasetConfig* _add = _internal_add_representative_datasets();
  // @@protoc_insertion_point(field_add:stablehlo.quantization.StaticRangePtqPreset.representative_datasets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::stablehlo::quantization::RepresentativeDatasetConfig >&
StaticRangePtqPreset::representative_datasets() const {
  // @@protoc_insertion_point(field_list:stablehlo.quantization.StaticRangePtqPreset.representative_datasets)
  return _impl_.representative_datasets_;
}

// -------------------------------------------------------------------

// QuantizationConfig

// .stablehlo.quantization.StaticRangePtqPreset static_range_ptq_preset = 1;
inline bool QuantizationConfig::_internal_has_static_range_ptq_preset() const {
  return preset_case() == kStaticRangePtqPreset;
}
inline bool QuantizationConfig::has_static_range_ptq_preset() const {
  return _internal_has_static_range_ptq_preset();
}
inline void QuantizationConfig::set_has_static_range_ptq_preset() {
  _impl_._oneof_case_[0] = kStaticRangePtqPreset;
}
inline void QuantizationConfig::clear_static_range_ptq_preset() {
  if (_internal_has_static_range_ptq_preset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.preset_.static_range_ptq_preset_;
    }
    clear_has_preset();
  }
}
inline ::stablehlo::quantization::StaticRangePtqPreset* QuantizationConfig::release_static_range_ptq_preset() {
  // @@protoc_insertion_point(field_release:stablehlo.quantization.QuantizationConfig.static_range_ptq_preset)
  if (_internal_has_static_range_ptq_preset()) {
    clear_has_preset();
    ::stablehlo::quantization::StaticRangePtqPreset* temp = _impl_.preset_.static_range_ptq_preset_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.preset_.static_range_ptq_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::stablehlo::quantization::StaticRangePtqPreset& QuantizationConfig::_internal_static_range_ptq_preset() const {
  return _internal_has_static_range_ptq_preset()
      ? *_impl_.preset_.static_range_ptq_preset_
      : reinterpret_cast< ::stablehlo::quantization::StaticRangePtqPreset&>(::stablehlo::quantization::_StaticRangePtqPreset_default_instance_);
}
inline const ::stablehlo::quantization::StaticRangePtqPreset& QuantizationConfig::static_range_ptq_preset() const {
  // @@protoc_insertion_point(field_get:stablehlo.quantization.QuantizationConfig.static_range_ptq_preset)
  return _internal_static_range_ptq_preset();
}
inline ::stablehlo::quantization::StaticRangePtqPreset* QuantizationConfig::unsafe_arena_release_static_range_ptq_preset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:stablehlo.quantization.QuantizationConfig.static_range_ptq_preset)
  if (_internal_has_static_range_ptq_preset()) {
    clear_has_preset();
    ::stablehlo::quantization::StaticRangePtqPreset* temp = _impl_.preset_.static_range_ptq_preset_;
    _impl_.preset_.static_range_ptq_preset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QuantizationConfig::unsafe_arena_set_allocated_static_range_ptq_preset(::stablehlo::quantization::StaticRangePtqPreset* static_range_ptq_preset) {
  clear_preset();
  if (static_range_ptq_preset) {
    set_has_static_range_ptq_preset();
    _impl_.preset_.static_range_ptq_preset_ = static_range_ptq_preset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:stablehlo.quantization.QuantizationConfig.static_range_ptq_preset)
}
inline ::stablehlo::quantization::StaticRangePtqPreset* QuantizationConfig::_internal_mutable_static_range_ptq_preset() {
  if (!_internal_has_static_range_ptq_preset()) {
    clear_preset();
    set_has_static_range_ptq_preset();
    _impl_.preset_.static_range_ptq_preset_ = CreateMaybeMessage< ::stablehlo::quantization::StaticRangePtqPreset >(GetArenaForAllocation());
  }
  return _impl_.preset_.static_range_ptq_preset_;
}
inline ::stablehlo::quantization::StaticRangePtqPreset* QuantizationConfig::mutable_static_range_ptq_preset() {
  ::stablehlo::quantization::StaticRangePtqPreset* _msg = _internal_mutable_static_range_ptq_preset();
  // @@protoc_insertion_point(field_mutable:stablehlo.quantization.QuantizationConfig.static_range_ptq_preset)
  return _msg;
}

inline bool QuantizationConfig::has_preset() const {
  return preset_case() != PRESET_NOT_SET;
}
inline void QuantizationConfig::clear_has_preset() {
  _impl_._oneof_case_[0] = PRESET_NOT_SET;
}
inline QuantizationConfig::PresetCase QuantizationConfig::preset_case() const {
  return QuantizationConfig::PresetCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quantization
}  // namespace stablehlo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcompiler_2fmlir_2fquantization_2fstablehlo_2fquantization_5fconfig_2eproto
